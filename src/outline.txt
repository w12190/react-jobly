  /*Todo List
x lift state from companyList to Routes
x setup state for JobList
x modify jobcard to Work
x implement jobcardlist

SUBROUTINE
x. CompanyList: a company is clicked, a state from Routes is set
  - clicked=CompanyCard?, so drill setter there?
x. CompanyDetails is loaded, state from Routes is passed along with 
  - sub-question what does CompanyDetails need to do its job? it needs
    - 1) company name
    - 2) company description
    - 3) all company jobs
x. Display JoCardList, passing it all the jobs
x. Afterwards, handle case where they just enter ./companies/handle (and it isn't set yet)

x implement JobList
x implement CompanyDetails with an API call 
x implement search box and add to JobList & CompanyList
- Extra projects
  - combining useEffects() for different calls*/
  - combine companyList and companyToGetJobsFor states if no need after all routes implemented
- Minor Q's: is it bad practice to pass around extra key/value pairs in data POJO's (change depending on answer)

Hint on Proceeding — Read After Thinking!

Here’s the strategy we took from our solution:
x Make login, signup, and logout functions in the App component.
x By passing login, logout, and signup functions down to the login and signup forms and the navigation bar, they’ll be able to call centralized functions to perform these processes
x Add token as a piece of state in App, along with state for the currentUser.





- Create an effect triggered by a state change of the token: this should call the backend to get information
on the newly-logged-in user and store it in the currentUser state.
x Expose the current user throughout the app with a context provider. This will make it easy to refer to the current app in navigation, on pages, and so on.
x This would be an excellent place to use useContext, so you can store the current user’s info high up in your hierarchy, like on the App component.


+ set a state in context in App.js with the user data
  + write getUserData() in api.js
  + need to keep this updated via useEffect() in App.js
  + update Homepage.js to display name
  + Navbar logic if logged in
+ create effect that updates user data 
